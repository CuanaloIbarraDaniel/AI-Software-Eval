{
	"info": {
		"_postman_id": "eb1114f6-95fc-4b92-b794-1c5d68194d73",
		"name": "AI Software Test Suite",
		"description": "AI Software Web Api Documentation for ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "Product",
					"item": [
						{
							"name": "[CREATE] Creates a new product.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"product_Name\", pm.variables.replaceIn('{{$randomProduct}}'))\r",
											"pm.environment.set(\"product_Quantity\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"pm.environment.set(\"product_SKU\", pm.variables.replaceIn('{{$guid}}'))\r",
											"pm.environment.set(\"product_ID\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"\r",
											"pm.environment.set(\"product_Name_2\", pm.variables.replaceIn('{{$randomProduct}}'))\r",
											"pm.environment.set(\"product_Quantity_2\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"pm.environment.set(\"product_SKU_2\", pm.variables.replaceIn('{{$guid}}'))\r",
											"pm.environment.set(\"product_ID_2\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"\r",
											"pm.environment.set(\"product_Name_3\", pm.variables.replaceIn('{{$randomProduct}}'))\r",
											"pm.environment.set(\"product_Quantity_3\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"pm.environment.set(\"product_SKU_3\", pm.variables.replaceIn('{{$guid}}'))\r",
											"pm.environment.set(\"product_ID_3\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"\r",
											"pm.environment.set(\"product_Name_4\", pm.variables.replaceIn('{{$randomProduct}}'))\r",
											"pm.environment.set(\"product_Quantity_4\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"pm.environment.set(\"product_SKU_4\", pm.variables.replaceIn('{{$guid}}'))\r",
											"pm.environment.set(\"product_ID_4\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"\r",
											"pm.environment.set(\"product_Name_5\", pm.variables.replaceIn('{{$randomProduct}}'))\r",
											"pm.environment.set(\"product_Quantity_5\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"pm.environment.set(\"product_SKU_5\", pm.variables.replaceIn('{{$guid}}'))\r",
											"pm.environment.set(\"product_ID_5\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"\r",
											"pm.environment.set(\"product_Name_6\", pm.variables.replaceIn('{{$randomProduct}}'))\r",
											"pm.environment.set(\"product_Quantity_6\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"pm.environment.set(\"product_SKU_6\", pm.variables.replaceIn('{{$guid}}'))\r",
											"pm.environment.set(\"product_ID_6\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"\r",
											"pm.environment.set(\"product_Name_7\", pm.variables.replaceIn('{{$randomProduct}}'))\r",
											"pm.environment.set(\"product_Quantity_7\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"pm.environment.set(\"product_SKU_7\", pm.variables.replaceIn('{{$guid}}'))\r",
											"pm.environment.set(\"product_ID_7\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"\r",
											"pm.environment.set(\"product_Name_8\", pm.variables.replaceIn('{{$randomProduct}}'))\r",
											"pm.environment.set(\"product_Quantity_8\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"pm.environment.set(\"product_SKU_8\", pm.variables.replaceIn('{{$guid}}'))\r",
											"pm.environment.set(\"product_ID_8\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"\r",
											"pm.environment.set(\"product_Name_9\", pm.variables.replaceIn('{{$randomProduct}}'))\r",
											"pm.environment.set(\"product_Quantity_9\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"pm.environment.set(\"product_SKU_9\", pm.variables.replaceIn('{{$guid}}'))\r",
											"pm.environment.set(\"product_ID_9\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"\r",
											"pm.environment.set(\"product_Name_10\", pm.variables.replaceIn('{{$randomProduct}}'))\r",
											"pm.environment.set(\"product_Quantity_10\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"pm.environment.set(\"product_SKU_10\", pm.variables.replaceIn('{{$guid}}'))\r",
											"pm.environment.set(\"product_ID_10\", pm.variables.replaceIn('{{$randomInt}}'))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(200);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"A new object has been successfully created by the server on the database.\");\r",
											"    pm.expect(pm.response.json().model).to.eql(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"product_Name\": \"{{product_Name}}\",\n    \"product_Quantity\": {{product_Quantity}},\n    \"product_SKU\": \"{{product_SKU}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Product/Create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Product",
										"Create"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "A new object has been successfully created by the server on the database.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"product_Name\": \"dolore elit\",\n    \"product_Quantity\": 1942192879,\n    \"product_SKU\": \"nulla aliquip tempor quis\",\n    \"product_ID\": -91253677\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Product/Create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Product",
												"Create"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[CREATE] Body is missing parameters",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(400);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"The data sent to this method does not satisfy the required validations.\");\r",
											"    pm.expect(pm.response.json().model[0]).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"product_Name\": \"{{product_Name}}\",\n    \"product_SKU\": \"{{product_SKU}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Product/Create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Product",
										"Create"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "The data sent to this method does not satisfy the required validations.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"product_Name\": \"dolore elit\",\n    \"product_Quantity\": 1942192879,\n    \"product_SKU\": \"nulla aliquip tempor quis\",\n    \"product_ID\": -91253677\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Product/Create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Product",
												"Create"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[CREATE] Body has duplicate parameters Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(400);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"An identical SKU has been found by the server.\");\r",
											"    pm.expect(pm.response.json().model).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"product_Name\": \"{{product_Name}}\",\n    \"product_Quantity\": {{product_Quantity}},\n    \"product_SKU\": \"{{product_SKU}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Product/Create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Product",
										"Create"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "The data sent to this method does not satisfy the required validations.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"product_Name\": \"dolore elit\",\n    \"product_Quantity\": 1942192879,\n    \"product_SKU\": \"nulla aliquip tempor quis\",\n    \"product_ID\": -91253677\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Product/Create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Product",
												"Create"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[READ] Gets a list of products.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(200);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"The server has successfully retrieved data present on the database.\");\r",
											"    pm.expect(pm.response.json().model[0]).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/Product/Read",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Product",
										"Read"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "The server has successfully retrieved data present on the database.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/Product/Read",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Product",
												"Read"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[UPDATE] Updates an existing product model.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(200);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"The information on the database has been updated by the server.\");\r",
											"    pm.expect(pm.response.json().model).to.eql(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"product_ID\": 1,\n    \"product_Name\": \"{{product_Name_2}}\",\n    \"product_Quantity\": {{product_Quantity_2}},\n    \"product_SKU\": \"{{product_SKU_2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Product/Update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Product",
										"Update"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "The information on the database has been updated by the server.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"product_ID\": 1015027732,\n    \"product_Name\": \"Ut adipisicing occaecat amet id\",\n    \"product_Quantity\": 486776480,\n    \"product_SKU\": \"in velit esse non consequat\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Product/Update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Product",
												"Update"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[UPDATE] Body does not have an existing ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(404);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"The request to the database has returned no data.\");\r",
											"    pm.expect(pm.response.json().model).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"product_ID\": 20000,\n    \"product_Name\": \"{{product_Name_2}}\",\n    \"product_Quantity\": {{product_Quantity_2}},\n    \"product_SKU\": \"{{product_SKU_2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Product/Update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Product",
										"Update"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "The request to the database has returned no data.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"product_ID\": 1015027732,\n    \"product_Name\": \"Ut adipisicing occaecat amet id\",\n    \"product_Quantity\": 486776480,\n    \"product_SKU\": \"in velit esse non consequat\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Product/Update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Product",
												"Update"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[UPDATE] Body is missing parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(400);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"The data sent to this method does not satisfy the required validations.\");\r",
											"    pm.expect(pm.response.json().model[0]).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"product_ID\": 1,\n    \"product_Quantity\": {{product_Quantity_2}},\n    \"product_SKU\": \"{{product_SKU_2}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Product/Update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Product",
										"Update"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "The data sent to this method does not satisfy the required validations.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"product_ID\": 1015027732,\n    \"product_Name\": \"Ut adipisicing occaecat amet id\",\n    \"product_Quantity\": 486776480,\n    \"product_SKU\": \"in velit esse non consequat\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Product/Update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Product",
												"Update"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[DELETE] Body does not have an existing ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(404);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"The request to the database has returned no data.\");\r",
											"    pm.expect(pm.response.json().model).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"product_ID\": 200000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Product/Delete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Product",
										"Delete"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "The data sent to this method does not satisfy the required validations.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"product_ID\": 1344198812,\n    \"product_SKU\": \"et in enim aute\",\n    \"product_Name\": \"ut reprehenderit\",\n    \"product_Quantity\": 55840819\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Product/Delete",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Product",
												"Delete"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[DELETE] Deletes an existing product model.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(200);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"An object has successfully been deleted by the server.\");\r",
											"    pm.expect(pm.response.json().model).to.eql(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"product_ID\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Product/Delete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Product",
										"Delete"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "An object has successfully been deleted by the server.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"product_ID\": 1344198812,\n    \"product_SKU\": \"et in enim aute\",\n    \"product_Name\": \"ut reprehenderit\",\n    \"product_Quantity\": 55840819\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Product/Delete",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Product",
												"Delete"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[READ] The list is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(404);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"The request to the database has returned no data.\");\r",
											"    pm.expect(pm.response.json().model).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/Product/Read",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Product",
										"Read"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "The request to the database has returned no data.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/Product/Read",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Product",
												"Read"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[DELETE] Body is missing parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(400);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"The data sent to this method does not satisfy the required validations.\");\r",
											"    pm.expect(pm.response.json().model[0]).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Product/Delete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Product",
										"Delete"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "The data sent to this method does not satisfy the required validations.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"product_ID\": 1344198812,\n    \"product_SKU\": \"et in enim aute\",\n    \"product_Name\": \"ut reprehenderit\",\n    \"product_Quantity\": 55840819\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Product/Delete",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Product",
												"Delete"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "Populate Database",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({url: 'http://localhost:5000/api/Product/Create', method: 'POST', header: 'Content-Type:application/json',\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"            product_Name: pm.environment.get(\"product_Name_2\"),\r",
											"            product_Quantity: pm.environment.get(\"product_Quantity_2\"),\r",
											"            product_SKU: pm.environment.get(\"product_SKU_2\")\r",
											"        })\r",
											"    }\r",
											"});\r",
											"pm.sendRequest({url: 'http://localhost:5000/api/Product/Create', method: 'POST', header: 'Content-Type:application/json',\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"            product_Name: pm.environment.get(\"product_Name_3\"),\r",
											"            product_Quantity: pm.environment.get(\"product_Quantity_3\"),\r",
											"            product_SKU: pm.environment.get(\"product_SKU_3\")\r",
											"        })\r",
											"    }\r",
											"});\r",
											"pm.sendRequest({url: 'http://localhost:5000/api/Product/Create', method: 'POST', header: 'Content-Type:application/json',\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"            product_Name: pm.environment.get(\"product_Name_4\"),\r",
											"            product_Quantity: pm.environment.get(\"product_Quantity_4\"),\r",
											"            product_SKU: pm.environment.get(\"product_SKU_4\")\r",
											"        })\r",
											"    }\r",
											"});\r",
											"pm.sendRequest({url: 'http://localhost:5000/api/Product/Create', method: 'POST', header: 'Content-Type:application/json',\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"            product_Name: pm.environment.get(\"product_Name_5\"),\r",
											"            product_Quantity: pm.environment.get(\"product_Quantity_5\"),\r",
											"            product_SKU: pm.environment.get(\"product_SKU_5\")\r",
											"        })\r",
											"    }\r",
											"});\r",
											"pm.sendRequest({url: 'http://localhost:5000/api/Product/Create', method: 'POST', header: 'Content-Type:application/json',\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"            product_Name: pm.environment.get(\"product_Name_6\"),\r",
											"            product_Quantity: pm.environment.get(\"product_Quantity_6\"),\r",
											"            product_SKU: pm.environment.get(\"product_SKU_6\")\r",
											"        })\r",
											"    }\r",
											"});\r",
											"pm.sendRequest({url: 'http://localhost:5000/api/Product/Create', method: 'POST', header: 'Content-Type:application/json',\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"            product_Name: pm.environment.get(\"product_Name_7\"),\r",
											"            product_Quantity: pm.environment.get(\"product_Quantity_7\"),\r",
											"            product_SKU: pm.environment.get(\"product_SKU_7\")\r",
											"        })\r",
											"    }\r",
											"});\r",
											"pm.sendRequest({url: 'http://localhost:5000/api/Product/Create', method: 'POST', header: 'Content-Type:application/json',\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"            product_Name: pm.environment.get(\"product_Name_8\"),\r",
											"            product_Quantity: pm.environment.get(\"product_Quantity_8\"),\r",
											"            product_SKU: pm.environment.get(\"product_SKU_8\")\r",
											"        })\r",
											"    }\r",
											"});\r",
											"pm.sendRequest({url: 'http://localhost:5000/api/Product/Create', method: 'POST', header: 'Content-Type:application/json',\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"            product_Name: pm.environment.get(\"product_Name_9\"),\r",
											"            product_Quantity: pm.environment.get(\"product_Quantity_9\"),\r",
											"            product_SKU: pm.environment.get(\"product_SKU_9\")\r",
											"        })\r",
											"    }\r",
											"});\r",
											"pm.sendRequest({url: 'http://localhost:5000/api/Product/Create', method: 'POST', header: 'Content-Type:application/json',\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"            product_Name: pm.environment.get(\"product_Name_10\"),\r",
											"            product_Quantity: pm.environment.get(\"product_Quantity_10\"),\r",
											"            product_SKU: pm.environment.get(\"product_SKU_10\")\r",
											"        })\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"product_Name\": \"{{product_Name}}\",\n    \"product_Quantity\": {{product_Quantity}},\n    \"product_SKU\": \"{{product_SKU}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Product/Create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Product",
										"Create"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Order",
					"item": [
						{
							"name": "[CREATE] Creates a new order.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(200);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"A new object has been successfully created by the server on the database.\");\r",
											"    pm.expect(pm.response.json().model).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"order_Status\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"pm.environment.set(\"order_ID\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"\r",
											"pm.environment.set(\"order_Status_2\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"pm.environment.set(\"order_ID_2\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"\r",
											"pm.environment.set(\"order_Status_3\", pm.variables.replaceIn('{{$randomInt}}'))\r",
											"pm.environment.set(\"order_ID_3\", pm.variables.replaceIn('{{$randomInt}}'))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"order_Status\": {{order_Status}},\n    \"order_ID\": {{order_ID}},\n    \"order_Product_List\": [\n        {\n            \"product_ID\": {{product_ID}},\n            \"product_SKU\": \"{{product_SKU}}\",\n            \"product_Name\": \"{{product_Name}}\",\n            \"product_Quantity\": {{product_Quantity}}\n        },\n        {\n            \"product_ID\": {{product_ID_2}},\n            \"product_SKU\": \"{{product_SKU_2}}\",\n            \"product_Name\": \"{{product_Name_2}}\",\n            \"product_Quantity\": {{product_Quantity_2}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Order/Create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Order",
										"Create"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "A new object has been successfully created by the server on the database.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"order_Status\": 1962829659,\n    \"order_ID\": 39882821,\n    \"order_Product_List\": [\n        {\n            \"product_ID\": -79678075,\n            \"product_SKU\": \"nisi labore proid\",\n            \"product_Name\": \"nulla\",\n            \"product_Quantity\": 34592845\n        },\n        {\n            \"product_ID\": 23659215,\n            \"product_SKU\": \"nulla ullamco aliquip sunt\",\n            \"product_Name\": \"occaecat dolor\",\n            \"product_Quantity\": -70363998\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Order/Create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Order",
												"Create"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[CREATE] Body is missing parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(400);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"The data sent to this method does not satisfy the required validations.\");\r",
											"    pm.expect(pm.response.json().model[0]).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"order_ID\": {{order_ID}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Order/Create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Order",
										"Create"
									]
								}
							},
							"response": [
								{
									"name": "The data sent to this method does not satisfy the required validations.",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"order_Status\": 1962829659,\n    \"order_ID\": 39882821,\n    \"order_Product_List\": [\n        {\n            \"product_ID\": -79678075,\n            \"product_SKU\": \"nisi labore proid\",\n            \"product_Name\": \"nulla\",\n            \"product_Quantity\": 34592845\n        },\n        {\n            \"product_ID\": 23659215,\n            \"product_SKU\": \"nulla ullamco aliquip sunt\",\n            \"product_Name\": \"occaecat dolor\",\n            \"product_Quantity\": -70363998\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Order/Create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Order",
												"Create"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[READ] Gets a list of orders.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(200);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"The server has successfully retrieved data present on the database.\");\r",
											"    pm.expect(pm.response.json().model[0]).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Order/Read",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Order",
										"Read"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "The server has successfully retrieved data present on the database.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/Order/Read",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Order",
												"Read"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[UPDATE] Updates an existing order model.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(200);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"The information on the database has been updated by the server.\");\r",
											"    pm.expect(pm.response.json().model).to.eql(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"order_Status\": 1,\n    \"order_ID\": 1,\n    \"order_Product_List\": [\n        {\n            \"product_ID\": {{product_ID_3}},\n            \"product_SKU\": \"{{product_SKU_3}}\",\n            \"product_Name\": \"{{product_Name_3}}\",\n            \"product_Quantity\": {{product_Quantity_3}}\n        },\n        {\n            \"product_ID\": {{product_ID_4}},\n            \"product_SKU\": \"{{product_SKU_4}}\",\n            \"product_Name\": \"{{product_Name_4}}\",\n            \"product_Quantity\": {{product_Quantity_4}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Order/Update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Order",
										"Update"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "The information on the database has been updated by the server.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"order_ID\": 585257735,\n    \"order_Status\": 476861808,\n    \"order_Product_List\": [\n        {\n            \"product_ID\": -46041273,\n            \"product_SKU\": \"exercitation tempor\",\n            \"product_Name\": \"Lorem esse exercitation ullamco\",\n            \"product_Quantity\": 74531763\n        },\n        {\n            \"product_ID\": -10332207,\n            \"product_SKU\": \"ipsum deserunt culpa\",\n            \"product_Name\": \"ullamco\",\n            \"product_Quantity\": 73749938\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Order/Update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Order",
												"Update"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[UPDATE] Body does not have an existing ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(404);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"The request to the database has returned no data.\");\r",
											"    pm.expect(pm.response.json().model).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"order_Status\": {{order_Status_2}},\n    \"order_ID\": 20000,\n    \"order_Product_List\": [\n        {\n            \"product_ID\": {{product_ID_3}},\n            \"product_SKU\": \"{{product_SKU_3}}\",\n            \"product_Name\": \"{{product_Name_3}}\",\n            \"product_Quantity\": {{product_Quantity_3}}\n        },\n        {\n            \"product_ID\": {{product_ID_4}},\n            \"product_SKU\": \"{{product_SKU_4}}\",\n            \"product_Name\": \"{{product_Name_4}}\",\n            \"product_Quantity\": {{product_Quantity_4}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Order/Update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Order",
										"Update"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "The request to the database has returned no data.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"order_ID\": 585257735,\n    \"order_Status\": 476861808,\n    \"order_Product_List\": [\n        {\n            \"product_ID\": -46041273,\n            \"product_SKU\": \"exercitation tempor\",\n            \"product_Name\": \"Lorem esse exercitation ullamco\",\n            \"product_Quantity\": 74531763\n        },\n        {\n            \"product_ID\": -10332207,\n            \"product_SKU\": \"ipsum deserunt culpa\",\n            \"product_Name\": \"ullamco\",\n            \"product_Quantity\": 73749938\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Order/Update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Order",
												"Update"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[UPDATE] Body is missing parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(400);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"The data sent to this method does not satisfy the required validations.\");\r",
											"    pm.expect(pm.response.json().model[0]).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"order_Product_List\": [\n        {\n            \"product_ID\": {{product_ID_3}},\n            \"product_SKU\": \"{{product_SKU_3}}\",\n            \"product_Name\": \"{{product_Name_3}}\",\n            \"product_Quantity\": {{product_Quantity_3}}\n        },\n        {\n            \"product_ID\": {{product_ID_4}},\n            \"product_SKU\": \"{{product_SKU_4}}\",\n            \"product_Name\": \"{{product_Name_4}}\",\n            \"product_Quantity\": {{product_Quantity_4}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Order/Update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Order",
										"Update"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "The data sent to this method does not satisfy the required validations.",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"order_ID\": 585257735,\n    \"order_Status\": 476861808,\n    \"order_Product_List\": [\n        {\n            \"product_ID\": -46041273,\n            \"product_SKU\": \"exercitation tempor\",\n            \"product_Name\": \"Lorem esse exercitation ullamco\",\n            \"product_Quantity\": 74531763\n        },\n        {\n            \"product_ID\": -10332207,\n            \"product_SKU\": \"ipsum deserunt culpa\",\n            \"product_Name\": \"ullamco\",\n            \"product_Quantity\": 73749938\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Order/Update",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Order",
												"Update"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[DELETE] Body does not have an existing ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(404);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"The request to the database has returned no data.\");\r",
											"    pm.expect(pm.response.json().model).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"order_ID\": 200000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Order/Delete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Order",
										"Delete"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "The request to the database has returned no data.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"order_ID\": 2025521338,\n    \"order_Status\": -80075962,\n    \"order_Product_List\": [\n        {\n            \"product_ID\": -53895538,\n            \"product_SKU\": \"sit dolor adipisicing cupidatat ut\",\n            \"product_Name\": \"aliquip est\",\n            \"product_Quantity\": -40103710\n        },\n        {\n            \"product_ID\": -93176069,\n            \"product_SKU\": \"ex labore\",\n            \"product_Name\": \"cupidatat dolore tempor\",\n            \"product_Quantity\": -83860826\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Order/Delete",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Order",
												"Delete"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[DELETE] Deletes an existing order model.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(200);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"An object has successfully been deleted by the server.\");\r",
											"    pm.expect(pm.response.json().model).to.eql(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"order_ID\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Order/Delete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Order",
										"Delete"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "An object has successfully been deleted by the server.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"order_ID\": 2025521338,\n    \"order_Status\": -80075962,\n    \"order_Product_List\": [\n        {\n            \"product_ID\": -53895538,\n            \"product_SKU\": \"sit dolor adipisicing cupidatat ut\",\n            \"product_Name\": \"aliquip est\",\n            \"product_Quantity\": -40103710\n        },\n        {\n            \"product_ID\": -93176069,\n            \"product_SKU\": \"ex labore\",\n            \"product_Name\": \"cupidatat dolore tempor\",\n            \"product_Quantity\": -83860826\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Order/Delete",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Order",
												"Delete"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[READ] The list is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(404);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"The request to the database has returned no data.\");\r",
											"    pm.expect(pm.response.json().model).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Order/Read",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Order",
										"Read"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "The request to the database has returned no data.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/Order/Read",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Order",
												"Read"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "[DELETE] Body is missing parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status response has all the variables\", function () {\r",
											"    pm.expect(pm.response.json().code).to.eql(400);\r",
											"    pm.expect(pm.response.json().description).to.eql(\"The data sent to this method does not satisfy the required validations.\");\r",
											"    pm.expect(pm.response.json().model[0]).to.exist;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Order/Delete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Order",
										"Delete"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": [
								{
									"name": "The data sent to this method does not satisfy the required validations.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"order_ID\": 2025521338,\n    \"order_Status\": -80075962,\n    \"order_Product_List\": [\n        {\n            \"product_ID\": -53895538,\n            \"product_SKU\": \"sit dolor adipisicing cupidatat ut\",\n            \"product_Name\": \"aliquip est\",\n            \"product_Quantity\": -40103710\n        },\n        {\n            \"product_ID\": -93176069,\n            \"product_SKU\": \"ex labore\",\n            \"product_Name\": \"cupidatat dolore tempor\",\n            \"product_Quantity\": -83860826\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/Order/Delete",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"Order",
												"Delete"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"code\": -74843985,\n \"description\": \"anim reprehenderit incididunt\",\n \"model\": {}\n}"
								}
							]
						},
						{
							"name": "Populate Database",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({url: 'http://localhost:5000/api/Order/Create', method: 'POST', header: 'Content-Type:application/json',\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"            order_Status: 1,\r",
											"            order_Product_List: [\r",
											"            {\r",
											"                product_ID: 3,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_3\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_3\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_3\")\r",
											"            },\r",
											"            {\r",
											"                product_ID: 4,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_4\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_4\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_4\"),\r",
											"            }]\r",
											"        })\r",
											"    }\r",
											"});\r",
											"pm.sendRequest({url: 'http://localhost:5000/api/Order/Create', method: 'POST', header: 'Content-Type:application/json',\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"            order_Status: 1,\r",
											"            order_Product_List: [\r",
											"            {\r",
											"                product_ID: 5,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_5\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_5\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_5\")\r",
											"            },\r",
											"            {\r",
											"                product_ID: 6,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_6\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_6\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_6\"),\r",
											"            }]\r",
											"        })\r",
											"    }\r",
											"});\r",
											"pm.sendRequest({url: 'http://localhost:5000/api/Order/Create', method: 'POST', header: 'Content-Type:application/json',\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"            order_Status: 1,\r",
											"            order_Product_List: [\r",
											"            {\r",
											"                product_ID: 7,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_7\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_7\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_7\")\r",
											"            },\r",
											"            {\r",
											"                product_ID: 8,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_8\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_8\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_8\"),\r",
											"            }]\r",
											"        })\r",
											"    }\r",
											"});\r",
											"pm.sendRequest({url: 'http://localhost:5000/api/Order/Create', method: 'POST', header: 'Content-Type:application/json',\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"            order_Status: 0,\r",
											"            order_Product_List: [\r",
											"            {\r",
											"                product_ID: 9,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_9\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_9\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_9\")\r",
											"            },\r",
											"            {\r",
											"                product_ID: 10,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_10\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_10\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_10\"),\r",
											"            },\r",
											"            {\r",
											"                product_ID: 8,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_8\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_8\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_8\"),\r",
											"            },\r",
											"            {\r",
											"                product_ID: 6,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_6\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_6\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_6\"),\r",
											"            }]\r",
											"        })\r",
											"    }\r",
											"});\r",
											"pm.sendRequest({url: 'http://localhost:5000/api/Order/Create', method: 'POST', header: 'Content-Type:application/json',\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"            order_Status: 1,\r",
											"            order_Product_List: [\r",
											"            {\r",
											"                product_ID: 4,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_4\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_4\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_4\"),\r",
											"            },\r",
											"            {\r",
											"                product_ID: 3,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_3\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_3\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_3\"),\r",
											"            },\r",
											"            {\r",
											"                product_ID: 8,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_8\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_8\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_8\"),\r",
											"            }]\r",
											"        })\r",
											"    }\r",
											"});\r",
											"pm.sendRequest({url: 'http://localhost:5000/api/Order/Create', method: 'POST', header: 'Content-Type:application/json',\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"            order_Status: 1,\r",
											"            order_Product_List: [\r",
											"            {\r",
											"                product_ID: 3,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_3\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_3\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_3\"),\r",
											"            },\r",
											"            {\r",
											"                product_ID: 9,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_9\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_9\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_9\"),\r",
											"            }]\r",
											"        })\r",
											"    }\r",
											"});\r",
											"pm.sendRequest({url: 'http://localhost:5000/api/Order/Create', method: 'POST', header: 'Content-Type:application/json',\r",
											"    body: { mode: 'raw', raw: JSON.stringify({\r",
											"            order_Status: 1,\r",
											"            order_Product_List: [\r",
											"            {\r",
											"                product_ID: 2,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_2\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_2\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_2\"),\r",
											"            },\r",
											"            {\r",
											"                product_ID: 5,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_5\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_5\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_5\"),\r",
											"            },\r",
											"            {\r",
											"                product_ID: 6,\r",
											"                product_SKU: pm.environment.get(\"product_SKU_6\"),\r",
											"                product_Name: pm.environment.get(\"product_Name_6\"),\r",
											"                product_Quantity: pm.environment.get(\"product_Quantity_6\"),\r",
											"            }]\r",
											"        })\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"order_Status\": 0,\n    \"order_ID\": {{order_ID}},\n    \"order_Product_List\": [\n        {\n            \"product_ID\": {{product_ID}},\n            \"product_SKU\": \"{{product_SKU}}\",\n            \"product_Name\": \"{{product_Name}}\",\n            \"product_Quantity\": {{product_Quantity}}\n        },\n        {\n            \"product_ID\": {{product_ID_2}},\n            \"product_SKU\": \"{{product_SKU_2}}\",\n            \"product_Name\": \"{{product_Name_2}}\",\n            \"product_Quantity\": {{product_Quantity_2}}\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/Order/Create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"Order",
										"Create"
									]
								},
								"description": "1) Logging: No. No logger has been configured for this method.<br />\r\n2) Cache: No. Calls to this method will not be cached.<br />\r\n3) Compression: No. No compression method is used for the response.<br />"
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000",
			"type": "string"
		}
	]
}